name: CMake

on:
  push:

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        abi: ["x86_64", "arm64-v8a", "x86", "armeabi-v7a" ]
        include:
        - abi: x86_64
          ndktarget: x86_64-linux-android-
        - abi: x86
          ndktarget: i686-linux-android-
        - abi: armeabi-v7a
          openssltarget: android-arm
          ndktarget: arm-linux-androideabi-
        - abi: arm64-v8a
          openssltarget: android-arm64
          ndktarget: aarch64-linux-android-
    steps:
    - run: sudo apt update && sudo apt install llvm g++
    - uses: actions/checkout@v2
    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r21e
        add-to-path: true
    - uses: actions/checkout@v2
      with:
        repository: "openssl/openssl"
        ref: master
        path: openssl
        
    - name: Configure and build Openssl
      run: |
        export PATH="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/:$PATH"
        ./Configure ${{ matrix.openssltarget || format('android-{0}', matrix.abi) }} && make build_libs
      env:
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        LD: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{matrix.ndktarget}}ld
        RANLIB: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{matrix.ndktarget}}ranlib
      working-directory: ${{github.workspace}}/openssl
      
    - uses: actions/upload-artifact@v2
      with:
        name: openssl-${{format('android-{0}', matrix.abi)}}
        path: |
          openssl/libssl.so
          openssl/libcrypto.so
    - uses: actions/checkout@v2
      with:
        repository: "protocolbuffers/protobuf"
        ref: 3.18.x
        path: protobuf
        submodules: recursive
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/buildprotobuf -S protobuf/cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_ABI=${{ matrix.abi }} -Dprotobuf_BUILD_TESTS=OFF
    - name: Build Protobuf
      run: cmake --build ${{github.workspace}}/buildprotobuf --config ${{env.BUILD_TYPE}}
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/buildprotobufhost -S protobuf/cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Dprotobuf_BUILD_TESTS=OFF
    - name: Build Protobuf
      run: cmake --build ${{github.workspace}}/buildprotobufhost --config ${{env.BUILD_TYPE}} --target protoc
    - uses: actions/upload-artifact@v2
      with:
        name: protobuf-${{format('android-{0}', matrix.abi)}}
        path: |
          buildprotobuf/cmake/libprotobuf.so
          buildprotobufhost/cmake/protoc
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_ABI=${{ matrix.abi }} -DProtobuf_SRC_ROOT_FOLDER=${{github.workspace}}/protobuf/src -DProtobuf_INCLUDE_DIR=${{github.workspace}}/protobuf/src -DProtobuf_PROTOC_EXECUTABLE=${{github.workspace}}/buildprotobufhost/cmake/protoc -DProtobuf_LIBRARY=${{github.workspace}}/buildprotobuf/cmake/libprotobuf.so) -DOPENSSL_SSL_LIBRARY=${{github.workspace}}/openssl/libssl.so -DOPENSSL_CRYPTO_LIBRARY=${{github.workspace}}/openssl/libcrypto.so -DOPENSSL_CRYPTO_LIBRARY=${{github.workspace}}/openssl/include
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    

  
      
